Andreza

1º - criar uma pasta em algum lugar do PC
2º - Dentro da pasta, botão direito, Open Git bash here
3º - git init
4º - verificar se foi inicializado, 
na pasta colocar modo visualização e habilitar as pastas ocultas.
Esse arquivo é criado e não deve ser modificado.
5º - criar um arquivo de texto e escrever algo. Essa é a Versão 1 do código
6º - na linha de comando digitar git status (mostra os arquivos add e não add no controle de versão)
7º - git add "[nome do arquivo]" (adiciona o arquivo no controle de versão)
8º - Criar mais arquivos (Agora tenho vários arquivos que ainda não estão no controle de versao)
9º - git status (tem varios arquivos ainda não estão)
10º - git add . (adiciona todos os arquivos ao controle de versão)
Criar a 1ª versão dos arquivos com commit
11º - git commit -m "commit inicial" (Boas praticas, como é a 1ªV. coloca-se esse nome/o m de -m é de mensagem)
Se for a primeira vez que roda o git no computador, é preciso configurar o git. 
Ele mostra exatamente o que é preciso realizar
12º - git config --global user.email "andrezacquintas@gmail.com"
13º - git config --global user.email "Andreza Quintas"
É realizado essa configuração, pois todas as versões ficam atrelados ao seu nome
14º - 11º - git commit -m "commit inicial" (roda novamente o comando inicial)
Agora temos uma nova versão
15º - git push (para enviar o arquivo de versão para a nuvem)
Mas ele ainda não sabe como enviar e pra onde enviar. Então vamos criar agora
16º - Dentro do Github criar um novo repositório e dar o nome para ele.
Observe e deixe o modo publico ou privado.
Marque a opção de add e README, para que as pessoas possam ter uma instrução de como usar
As demais pode deixar sem marcar.
Depois clicar em criate repository
copiar o link do repository
voltar no git
17º - git remote add origin <<link do repository>> (Aqui já definimos para onde será enviado 
as informações do meu código)
18º - git push (agora não deu nenhuma mensagem)
AQui ele não vai funcionar diretamente, pq não definimos para qual branch ele deve enviar;
branch: Imagine que seja divisões/versoes diferentes do codigo que estão sendo versionadas de forma separada.
Inicialmente, sempre enviamos para a master.
19º - git push --set-upstream origin master (Copie o código que ele disponibiliza e cole no terminal de comando)
Agora ele vai abrir a tela de login do github, pq não fizemos login ainda.
Ele vai abrir a tela para login, aguarde um pouco e click em Autorizar git-ecosistema e coloque a sua senha 
Vai abrir uma mensagem que foi adicionado com sucesso.
Se você for no github, vera que sua branch foi atualizada e aparece seus pacotes dentro da pasta.
20º - Abrir um dos materiais e modificar e salvar
21º - git status (verifica se tem algum material novo)
22º - git add . (envia o material para colocar no github)
23º - git status (confirma se foi enviado)
24º - git commit -m "permitir cadastrar usuarios" (envia o conteudo e da um nome relacionado ao que foi adicionado)
25º - git push (envia a atualização do material para o github)
verificar no github que foi adicionado um controle de verção

Como ver o historico das versoes do meu codigo
26º - git reflog (mostras as versoes ate o momento, no topo esta a versao mais atual e em baixo as demais versoes

Como voltar na versão anterior caso cometa algum erro
27º - git reset --hard <<codigo da versao>>
para voltar para a versão atual repita os passos 26 e 27


